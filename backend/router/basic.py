import os
import json
from fastapi import HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from fastapi.encoders import jsonable_encoder
from fastapi import APIRouter, Request
from auth.telegram_auth import get_verified_user
from router.model import UserId, SaveDataRequest, SaveResponse
from datetime import datetime

router = APIRouter(
    prefix="",
    tags=["Basic"]
)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
TEMPLATES_DIR = os.path.join(BASE_DIR, "frontend", "templates")
templates = Jinja2Templates(directory=TEMPLATES_DIR)

storage = {
    "data": {},
    "last_saved": None
}

@router.get("/", response_class=HTMLResponse)
async def get_basic(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@router.post("/api/save", response_model=SaveResponse)
async def save_data(data: SaveDataRequest):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        storage["data"] = jsonable_encoder(data)
        storage["last_saved"] = datetime.now().isoformat()
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n" + "="*50)
        print("üì• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø")
        print("="*50)
        print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {data.currentProject}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(data.projects)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
        for project_name, project_data in data.projects.items():
            sections = project_data.get('sections', [])
            total_tasks = sum(len(section.get('tasks', [])) for section in sections)
            print(f"\nüè∑Ô∏è  –ü—Ä–æ–µ–∫—Ç: {project_name}")
            print(f"   üìÇ –°–µ–∫—Ü–∏–π: {len(sections)}")
            print(f"   ‚úÖ –ó–∞–¥–∞—á: {total_tasks}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
            for i, section in enumerate(sections, 1):
                section_name = section.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                tasks = section.get('tasks', [])
                print(f"   {i}. üìã –°–µ–∫—Ü–∏—è: {section_name}")
                print(f"      üìù –ó–∞–¥–∞—á: {len(tasks)}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º
                for j, task in enumerate(tasks, 1):
                    important = "üö©" if task.get('important') else "  "
                    assignee = task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
                    status = task.get('status', '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞')
                    comments_count = len(task.get('comments', []))
                    print(f"      {j}. {important} {task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"         üë§ {assignee} | üìä {status} | üí¨ {comments_count} –∫–æ–º–º–µ–Ω—Ç.")
        
        print("\nüíæ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´")
        print("="*50 + "\n")
        
        return SaveResponse(
            status="success",
            message="Data saved successfully",
            timestamp=storage["last_saved"]
        )
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Save failed: {str(e)}")

@router.get("/api/load")
async def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("\n" + "="*50)
        print("üì§ –ó–ê–ü–†–û–° –î–ê–ù–ù–´–•")
        print("="*50)
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if not storage["data"]:
            print("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return {"projects": {}, "currentProject": None}
        
        last_saved = storage.get("last_saved", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        data = storage["data"]
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π encoder FastAPI
        json_compatible_data = jsonable_encoder(data)
        
        print(f"üíæ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {last_saved}")
        print(f"üìÅ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {data.get('currentProject')}")
        print(f"üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(data.get('projects', {}))}")
        
        print(data)
        
        print("‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´")
        print("="*50 + "\n")
        
        return json_compatible_data
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Load failed: {str(e)}")